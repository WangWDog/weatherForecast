#include "../../common/cli_getch.h"
#include <iostream>
#include <curl/curl.h>

#include "../../common/cli_clear_console.h"
#include "config_context.h"
#include "../../../config/config_key.h"
#include "../../../config/config_user.h"
#include "../../common/delay.h"
#include "weather_manager.h"
#include "../../i18n/i18n_loader.h"
#include "common/cli_context.h"

void showCityChoose(CliContext& cli) {

    auto& configKey = cli.config.key();
    auto& configUser = cli.config.user();
    auto& i18n = cli.i18n;
    auto& cacheManager = cli.cache;

    WeatherManager wm(configKey.getHFApiKey(), configKey.getHFHost(), configUser.getLanguage());

    std::string keyword;
    std::vector<CityResult> matches;

    while (true) {
        clearConsole();

        // ÊòæÁ§∫‰∏ªËèúÂçï
        std::cout << i18n.tr("searchCity", "title") << "\n";  // ÁøªËØë "‰∏ªËèúÂçï > ËÆæÁΩÆÂüéÂ∏Ç"

        if (!keyword.empty()) {
            matches = wm.searchCity(keyword, configUser.getLanguage());
            std::cout << " üîé " << keyword << i18n.tr("searchCity", "searching") << "\n";  // ÁøªËØë "ÊêúÁ¥¢ÁªìÊûú"
            if (matches.empty()) {
                std::cout << "\t" << i18n.tr("searchCity", "not_found") << "\n";  // ÁøªËØë "Êú™ÊâæÂà∞ÂåπÈÖçÂüéÂ∏Ç"
            } else {
                int size = matches.size();
                if (size > 9) size = 9;
                for (size_t i = 0; i < size; ++i) {
                    const auto& c = matches[i];
                    std::cout << "\t";
                    std::cout << i + 1 << ". " << c.name
                        << " | " << c.adm1 << " ¬∑ " << c.adm2 << " ¬∑ " << c.country
                        << " [ID: " << c.id << "]\n";
                }
                std::cout << i18n.tr("searchCity", "select_prompt") << "\n";  // ÁøªËØë "ËæìÂÖ•ÁºñÂè∑ÈÄâÊã©ÂüéÂ∏ÇÔºåÊàñÁªßÁª≠ËæìÂÖ•ÂÖ≥ÈîÆÂ≠ó..."
            }
        }

        // ËæìÂÖ•ÊèêÁ§∫
        std::cout << i18n.tr("searchCity", "input_hint") << keyword;  // ÁøªËØë "ËæìÂÖ•ÂüéÂ∏ÇÂÖ≥ÈîÆÂ≠óÔºàËæìÂÖ• : ËøîÂõû‰∏ªËèúÂçïÔºâ"

        char ch = cli_getch();
        if (ch == ':' || keyword == ":") {
            std::cout << "\n" << i18n.tr("searchCity", "cancelled") << std::endl;  // ÁøªËØë "Â∑≤ÂèñÊ∂àËÆæÁΩÆÔºåËøîÂõû‰∏ªËèúÂçï"
            delay_ms(2000);
            return;
        } else if (ch == '\n') {
            return;
        } else if (ch == '\b' && !keyword.empty()) {
            keyword.pop_back();  // ÈÄÄÊ†ºÂà†Èô§‰∏Ä‰∏™Â≠óÁ¨¶
        } else if (ch >= '0' && ch <= '9' && !matches.empty()) {
            int index = ch - '0';
            if (index >= 1 && index <= matches.size()) {
                const auto& selected = matches[index - 1];
                configUser.setCityName(selected.name);
                configUser.setCityId(selected.id);
                configUser.save();
                configUser.load();
                //Áî±‰∫é‰ø°ÊÅØ‰∏éÂüéÂ∏ÇÊúâÂÖ≥ ÊâÄ‰ª•Êç¢ÂüéÂ∏ÇÂêéË¶ÅÊ∏ÖÈô§ÁºìÂ≠ò
                cacheManager.clearAll();
                std::cout << "\n" << i18n.tr("searchCity", "success") << ": " << selected.name
                    << "Ôºà" << selected.adm1 << " ¬∑ " << selected.country << "Ôºâ" << std::endl;  // ÁøªËØë "ÂüéÂ∏ÇËÆæÁΩÆÊàêÂäü"
                return;
            }
        } else {
            keyword += ch;  // Â∞ÜÂ≠óÁ¨¶Ê∑ªÂä†Âà∞ÂÖ≥ÈîÆÂ≠ó‰∏≠
        }
    }
}
